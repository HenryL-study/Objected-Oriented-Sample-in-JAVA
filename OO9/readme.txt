README


这次的测试真的比较迷233333

首先地图请直接替换我的工程文件夹下的Map.txt。
请一定保证联通性和地图的正确性~~否则会出错，我已将其catch

添加乘客请在Passenger_Monitor  里面的run方法中添加。
默认程序已经添加好了300条随机乘客指令。
你可以继续添加，但是队列中最多同时容纳400条指令。
添加完指令后可以继续调用一系列方法查看出租车状态，但是要稍等出租车指令添加完
成后才能执行。
所以指令一多延迟会很高。我觉得这样并不能很方便的测试
你可以在我的Taxi类里面添加一些控制台输出来看一看是否正常运行~
（我是这么做的）也可以每用一次addPSG,查看一遍你想看的出租车状态，这样几乎无延迟。

addPSG需要传入两个Index坐标
Index构造函数为两个int类型。
不正确的坐标范围会被忽略。
可以通过sleep来控制添加的时间，不过我觉得意义不大。

关于打开关闭道路的方法：
从控制台实时输入
关闭： 1 1 1  前两个数字是坐标，对应传入的地图上的点，第三个数字为要改的数字。
三个数字以一个空格隔开，有且仅有一个空格。

下面，说明我理解的指导书对于开关边的要求，以防产生不必要的误会：
如果对于地图上已存在的边，只能关闭，不连通的边是不能打开的；
所以，3只能改成1或2；1和2只能改成0；0不能修改；能打开的边只能是之前关闭的边。

恢复：首先输入recover，然后选择要恢复的道路序号

例：
1 1 1
Delete successful!
recover
Now changed 1 paths. Input the num that you want to recover.
0: Index (1,1) 2
0
Recover successful!


程序的默认输出是
Taxi 65: served (61,5) to (47,26)
表示某一号Taxi 服务了从哪去哪的乘客。
或者
(41,75) to (66,21) can't find any taxi.

正常情况下程序不会自己停止，
需要测试者手动点击红色方块按钮才会终止，
因为程序一直在监控用户的输入

等红灯时间不算在运行时间内

程序输出时请不要输入

其他要求参见指导书

最后关于红字，因为很多地方用了e.printStackTrace()；便于发现为什么有错
这里不是崩溃哦~


理论上经过多次测试。这个滴滴应该是没问题了。

感谢同学的辛苦测试与付出。
